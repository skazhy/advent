#!/usr/bin/env python3

# Script to generate links to solved puzzles.

from itertools import repeat
import json

from puzzle_lookup import all_puzzles


def md_link(url, title):
    return f"[{title}]({url})"


def md_rel_link(url, title):
    return md_link(f"../{url}", title)


def md_table_row(*columns):
    return f"| {' | '.join(columns)} |\n"


def md_table_header(*columns):
    return f"{md_table_row(*columns)}| {' |'.join(repeat(' --- ', len(columns)))}|\n"


def md_header(title, level):
    return f"{''.join(repeat('#', level))} {title}\n\n"


def md_ul(content):
    return f"- {content}\n"


def doc_footer():
    return f"_Note: this file was {md_rel_link('scripts/gen_docs.py', 'autogenerated')}, do not edit it directly._"


def gen_completion_md(puzzles):
    with open("doc/PUZZLES.md", "w", encoding="utf-8") as doc:
        doc.write(md_header("Solved Advent of Code puzzles", 1))
        sorted_puzzles = sorted(puzzles.keys(), reverse=True)

        for year in sorted_puzzles:
            doc.write(md_ul(md_link(f"#{year}", f"{year} puzzles")))

        for year in sorted_puzzles:
            doc.write(md_header(year, 2))
            doc.write(md_table_header("Day", "Solutions"))

            for day in sorted(puzzles[year], key=int):
                solutions = []
                for lang in sorted(puzzles[year][day], key=lambda x: x):
                    solutions.append(md_rel_link(puzzles[year][day][lang], lang))
                doc.write(md_table_row(day, ", ".join(solutions)))
            doc.write("\n")
        doc.write(doc_footer())


def write_theme_block(doc, theme, puzzles, level=2):
    doc.write(md_header(theme["name"], level))
    if theme.get("description"):
        doc.write(f"{theme['description']}\n\n")

    for y, d in theme.get("puzzles", []):
        links = ", ".join(md_rel_link(url, lang) for lang, url in puzzles[str(y)][str(d)].items())
        doc.write(md_ul(f"{y}.{d} in {links}"))
    if theme.get("puzzles"):
        doc.write("\n")

    for s in theme.get("sections", []):
        write_theme_block(doc, s, puzzles, level + 1)


def gen_theme_doc(puzzles):
    themes = json.load(open("doc/themes.json", "r"))

    with open("doc/THEMES.md", "w", encoding="utf-8") as doc:
        doc.write(md_header("Puzzle themes", 1))
        for theme in themes:
            write_theme_block(doc, theme, puzzles)
        doc.write(doc_footer())


if __name__ == "__main__":
    print("Regenerating completed puzzle doc...")
    puzzles = all_puzzles()
    gen_completion_md(puzzles)
    gen_theme_doc(puzzles)
